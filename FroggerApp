import javafx.animation.AnimationTimer;
import javafx.animation.FadeTransition;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.util.ArrayList;
import java.util.List;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;
import java.util.Timer;
import java.util.TimerTask;
import javafx.geometry.Pos;

public class FroggerApp extends Application
{	
	int timepassed = 0;
	
	Timer time = new Timer();
	Text text = new Text("00:00:00");
	 Label lbl = new Label("00:00:00");
	 
	 
  
	
	/*************************************
     * This section initiates variables
     ************************************/
	private AnimationTimer timer;
    private Pane root;
    private List<Node> wrench = new ArrayList<>();
    private Node dodger;
    
    

    /*************************************
     * This section creates the content
     ************************************/
    private Parent createContent()
    {
        root = new Pane ();
        root.setStyle("-fx-background-color: blue");
      
        
        root.setPrefSize(620,600);

        dodger = initDodger();

        root.getChildren().addAll(dodger,lbl);

        timer = new AnimationTimer()
        {
            @Override
            public void handle(long now)
            {
                onUpdate();
            }
        };
        timer.start();
        
        return root;
    }//Ends Conten0t
    

    /*************************************
     * creates rectangle for player
     ************************************/
    private Node initDodger()
    {
        Rectangle rect = new Rectangle(38, 38, Color.GREEN);
        rect.setTranslateY(350 - 39);

        return rect;
    }// Ends Player creation
    
    
    
    /*************************************
     * creates rectangle for wrenches
     ************************************/
    private Node spawnWrench()
    {
        Circle circ = new Circle(20, Color.PURPLE);
        circ.setTranslateX((int) (Math.random() * 14) * 60 );
        root.getChildren().addAll(circ);

        return circ;
    }// Ends wrench creation

        
    
    
    /*************************************
     * This section updates the frames
     ************************************/
        private void onUpdate()
        {
            for (Node wrench : wrench)
                wrench.setTranslateY(wrench.getTranslateY() + Math.random() * 20);

            if (Math.random() < 0.075)
            {
                wrench.add(spawnWrench());
            }

            checkState();
        }//Ends frame Update
        
        /******************************************************
         * This section stops the game if player collides with another
         *******************************************************/
        private void  checkState()
        {
            for (Node wrench : wrench)
            {
                if (wrench.getBoundsInParent().intersects(dodger.getBoundsInParent()))
                {
                	timer.stop();
                	 String lose = "You Lose";
                	 
                	 HBox hbox2 = new HBox();
                	 hbox2.setTranslateX(210);
                	 hbox2.setTranslateY(250);
                	 root.getChildren().add(hbox2);
                	 
                	  for (int i = 0; i < lose.toCharArray().length; i++)
                      {
                          char letter = lose.charAt(i);

                          Text text = new Text (String.valueOf(letter));
                          text.setFont(Font.font(48));
                          text.setOpacity(0);
                          hbox2.getChildren().add(text);

                          FadeTransition ft = new FadeTransition(Duration.seconds(0.66), text);
                          ft.setToValue(1);
                          ft.setDelay(Duration.seconds(i * 0.15));
                          ft.play();
                     
                      }
                	  
                	  
      
                root.getScene().setOnKeyPressed(event ->
                {
                	switch (event.getCode())
                    {
                        case G:
                        	
                        	 dodger.setTranslateX(0);
                             dodger.setTranslateY(350 - 39);
                             
                        	break;
                        case B:		
                        	createContent();
                        	timer.start();
                        	
                        	
                        		break;
                        		default:
                        		
                }});
              
                
            }
        }
            
            /***************************************************************************
             * This section determines what happens when you reach the other side of the screen
             ***************************************************************************/
        if (dodger.getTranslateX() >= 600)
        {
            timer.stop();
            String win = "You Win";

            HBox hbox = new HBox ();
            hbox.setTranslateX(210);
            hbox.setTranslateY(250);
            root.getChildren().addAll(hbox);
            for (int i = 0; i < win.toCharArray().length; i++)
            {
                char letter = win.charAt(i);

                Text text = new Text (String.valueOf(letter));
                text.setFont(Font.font(48));
                text.setOpacity(0);
                hbox.getChildren().add(text);

                FadeTransition ft = new FadeTransition(Duration.seconds(0.66), text);
                ft.setToValue(1);
                ft.setDelay(Duration.seconds(i * 0.15));
              ft.play();
            }
        }
    }
        /**********************************
         * This section starts the game
         ******************************** */
    @Override
    public void start(Stage stage) throws Exception
    {
        stage.setScene (new Scene(createContent()));
        stage.getScene().setOnKeyPressed(event ->
        {
            switch (event.getCode())
            {
                case W:
                    dodger.setTranslateY(dodger.getTranslateY() - 40);
                    break;
                case S:
                    dodger.setTranslateY(dodger.getTranslateY() + 40);
                    break;
                case A:
                    dodger.setTranslateX(dodger.getTranslateX() - 40);
                    break;
                case D:
                    dodger.setTranslateX(dodger.getTranslateX() + 40);
                    break;
                default:
                    break;

                  
            }
        });
        stage.setTitle("Dodger Pro");
        
        stage.show();
    }//End Start Exception
    public static void main (String[] args)
    {
        launch(args);
    }
   
    }//End Main
